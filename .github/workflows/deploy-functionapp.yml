name: Deploy Python Azure Function

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  AZURE_FUNCTIONAPP_NAME: fn-iot-ehub
  AZURE_RESOURCE_GROUP: iot-gen-ehub
  PYTHON_VERSION: '3.11'
  FUNCTION_DIR: function_app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      working-directory: ${{ env.FUNCTION_DIR }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # --- NEW DEBUGGING STEP ---
    - name: ðŸ’¡ Install tree for debugging
      run: sudo apt-get install tree

    - name: ðŸ’¡ Show file structure before zipping
      working-directory: ${{ env.FUNCTION_DIR }}
      run: tree .

    - name: ðŸ’¡ Check dependencies for debugging
      run: pip freeze
       
    # --- END NEW STEP ---
    
    - name: Zip Function App for deployment
      run: |
        # Change working directory to the root of the repository
        cd ${{ github.workspace }}
        # Correctly zip the necessary files from the function_app directory
        # The -j flag flattens the directory structure, which is not what we want.
        # So we explicitly list the files and directory to include from the FUNCTION_DIR
        zip -r functionapp.zip ${{ env.FUNCTION_DIR }}/host.json ${{ env.FUNCTION_DIR }}/requirements.txt ${{ env.FUNCTION_DIR }}/eventhub_triggered_func -x "*.git*" "__pycache__/*"
        # The above command is complex. A simpler, more robust way is to use `cd`.
        # Corrected simplified method
        cd ${{ env.FUNCTION_DIR }}
        zip -r ../functionapp.zip . -x "*.git*" "__pycache__/*"

    - name: List ZIP contents (debug)
      run: unzip -l functionapp.zip

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure Function App
      id: deploy
      run: |
        # Force Azure to run the build process on its server
        az webapp config appsettings set \
          --resource-group $AZURE_RESOURCE_GROUP \
          --name $AZURE_FUNCTIONAPP_NAME \
          --settings SCM_DO_BUILD_DURING_DEPLOYMENT=true

        # Deploy with verbose logging to see the remote build process
        az functionapp deployment source config-zip \
          --resource-group $AZURE_RESOURCE_GROUP \
          --name $AZURE_FUNCTIONAPP_NAME \
          --src functionapp.zip \
          --debug
          
    - name: Restart Function App (force sync)
      run: |
        az functionapp restart --name $AZURE_FUNCTIONAPP_NAME --resource-group $AZURE_RESOURCE_GROUP
    
    - name: List deployed functions
      run: |
        sleep 30 # Give time for the function to be discovered after restart
        az functionapp function list --name $AZURE_FUNCTIONAPP_NAME --resource-group $AZURE_RESOURCE_GROUP --output table







